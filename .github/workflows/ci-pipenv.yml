name: Build & Test using pipenv

on: [push, pull_request]
  
jobs:
  mac:
    name: "MacOS: Python ${{ matrix.python-version }}"
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip pipenv tox
        brew install fplll pari r
        tox -e local-homebrew-macos-usrlocal configure.ac
        R RHOME
      env:
        SKIP_BOOTSTRAP: yes
        SKIP_CONFIGURE: yes
    - name: Build dependencies
      run: |
        tox -e local-homebrew-macos-usrlocal build-local
        
        export PKG_CONFIG_PATH=$GITHUB_WORKSPACE/.tox/local-homebrew-macos-usrlocal/local/lib/pkgconfig:PKG_CONFIG_PATH
        export LIBRARY_PATH=$GITHUB_WORKSPACE/.tox/local-homebrew-macos-usrlocal/local/lib:$LIBRARY_PATH
        export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/.tox/local-homebrew-macos-usrlocal/local/lib:$LD_LIBRARY_PATH
        export CPATH=$GITHUB_WORKSPACE/.tox/local-homebrew-macos-usrlocal/local/include:$CPATH
        export SAGE_SHARE=$GITHUB_WORKSPACE/.tox/local-homebrew-macos-usrlocal/local/share
        echo "$GITHUB_WORKSPACE/.tox/local-homebrew-macos-usrlocal/local/bin" >> $GITHUB_PATH
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$LIBRARY_PATH" >> $GITHUB_ENV
        echo "CPATH=$CPATH" >> $GITHUB_ENV
        echo "SAGE_SHARE=$SAGE_SHARE" >> $GITHUB_ENV   
        echo "$CFLAGS"
        echo "CFLAGS=-I/usr/local/Cellar/gmp/6.2.1/include -L/usr/local/Cellar/gmp/6.2.1/lib -I /usr/local/Cellar/boost/1.75.0_1/include" >> $GITHUB_ENV
      env:
        MAKE: make -j2
        SKIP_SYSTEM_PKG_INSTALL: yes
        # Tox runs everything as root, so we have to enable build as root user
        EXTRA_CONFIGURE_ARGS: "--enable-build-as-root"
    - name: Set up cache
      uses: actions/cache@v1
      with:
        path: src/.venv
        key: venv-runner.os-${{ hashFiles('src/Pipfile.lock') }}
    - name: Create virtual environment
      run: |
        source ../.homebrew-build-env
        mkdir -p .venv
        pipenv install --verbose --python ${{ matrix.python-version }} --ignore-pipfile
        pipenv run pip list
      working-directory: src
      env:
        PIP_NO_BUILD_ISOLATION: false
        # Fix path to R, since otherwise sage's r is used
        R_HOME: /usr/local/
        # Fix udl.h:18:1: error: unknown type name 'constexpr'
        CXXFLAGS: -std=c++11
    # The following is for testing purposes in case the pipenv install above fails
    - name: Install sage (again)
      run: pipenv run pip install -e . --verbose --upgrade --exists-action=i --no-build-isolation
      working-directory: src
      if: always()
      env:
        # Fix udl.h:18:1: error: unknown type name 'constexpr'
        CXXFLAGS: -std=c++11
    - name: Run tests
      run: pipenv run sage-runtests --all --timeout=300
      working-directory: src
      env:
        # Set SAGE_LOCAL (required for gap)
        SAGE_LOCAL: ${{GITHUB.WORKSPACE}}/.tox/local-homebrew-macos-usrlocal/local
 
  linux:
    name: "Ubuntu: Python ${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    container: 
      image: ubuntu:20.10
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          apt-get update -y
          apt-get install -y sudo
          apt-get install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-dev python3-pip
          apt-get install -y tzdata keyboard-configuration libfplll-dev fplll-tools singular-data wget
          python3 -m pip install --upgrade pip pipenv tox
          tox -e local-sudo-standard configure.ac
        env:
          # Needed since otherwise the installation of tzdata/keyboard-configuration hangs
          DEBIAN_FRONTEND: noninteractive
          SKIP_BOOTSTRAP: yes
          SKIP_CONFIGURE: yes
      - name: Build dependencies
        run: |
          tox -e local-sudo-standard build-local
          
          export PKG_CONFIG_PATH=$GITHUB_WORKSPACE/.tox/local-sudo-standard/local/lib/pkgconfig:PKG_CONFIG_PATH
          export LIBRARY_PATH=$GITHUB_WORKSPACE/.tox/local-sudo-standard/local/lib:$LIBRARY_PATH
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/.tox/local-sudo-standard/local/lib:$LD_LIBRARY_PATH
          export CPATH=$GITHUB_WORKSPACE/.tox/local-sudo-standard/local/include:$CPATH
          export SAGE_SHARE=$GITHUB_WORKSPACE/.tox/local-sudo-standard/local/share
          echo "$GITHUB_WORKSPACE/.tox/local-sudo-standard/local/bin" >> $GITHUB_PATH
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPATH=$CPATH" >> $GITHUB_ENV
          echo "SAGE_SHARE=$SAGE_SHARE" >> $GITHUB_ENV
        env:
          MAKE: make -j2
          SKIP_SYSTEM_PKG_INSTALL: yes
          # Tox runs everything as root, so we have to enable build as root user
          EXTRA_CONFIGURE_ARGS: "--enable-build-as-root"
      - name: Set up cache
        uses: actions/cache@v1
        with:
          path: src/.venv
          key: venv-runner.os-${{ hashFiles('src/Pipfile.lock') }}
      - name: Create virtual environment
        run: |
          mkdir -p .venv
          pipenv install --verbose --python /usr/bin/python${{ matrix.python-version }} --ignore-pipfile
          pipenv run pip list
        working-directory: src
        env:
          PIP_NO_BUILD_ISOLATION: false
      # The following is for testing purposes in case the pipenv install above fails
      - name: Install sage (again)
        run: pipenv run pip install -e . --verbose --upgrade --exists-action=i --no-build-isolation
        working-directory: src
        if: always()
      - name: Run tests
        run: pipenv run sage-runtests --all --timeout=300
        working-directory: src
        env:
          # Set SAGE_LOCAL (required for gap)
          SAGE_LOCAL: ${{GITHUB.WORKSPACE}}/.tox/local-sudo-standard/local
          # Use Sage's version of mpmath
          # https://trac.sagemath.org/ticket/25445
          # https://github.com/cschwan/sage-on-gentoo/issues/628
          MPMATH_SAGE: 1
