name: Build & Test using pipenv

on: [push, pull_request]
  
jobs:
  mac:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install pipenv
      run: brew install pipenv
    - name: Install dependencies
      run: brew install pari ppl singular gsl lapack boost bdw-gc glpk libatomic_ops mpfi nauty ninja openblas openssl pandoc gpatch ppl r readline suite-sparse yasm zeromq
    - name: Create virtual environment
      run: cd src && mkdir -p .venv && pipenv install --dev --skip-lock --sequential && pipenv run pip list
    - name: Install editable manually
      run: cd src && pipenv run pip install -e . --verbose --upgrade --exists-action=i --no-build-isolation
    - name: Test
      run: cd src && pipenv run python -c 'import sage.all'
    - name: Configure
      run: |
        brew install autoconf automake
        ./bootstrap -d && ./configure
      if: always()
 
  linux:
    runs-on: ubuntu-latest
    container: 
      image: ubuntu:20.10
    steps:
      - uses: actions/checkout@v2
      - name: Install tools
        run: |
          apt-get update -y
          apt-get install -y apt-transport-https wget
          wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          dpkg -i packages-microsoft-prod.deb
          apt-get update -y
          apt-get install -y dotnet-sdk-5.0
          dotnet tool install powershell --tool-path /usr/local/bin
          apt-get update -y
          apt-get install -y python3-pip
          pip install pipenv
      - name: Install dependencies
        run: |
          Function ExtractPackages
          {
            param($path)
            @(Get-Content $path | Where-Object { !$_.StartsWith("#") })
          }
          [System.Collections.ArrayList]$packages = Get-ChildItem build/pkgs -recurse -Include debian.txt, debian-bootstrap.txt | foreach-object { ExtractPackages $_.FullName } | Sort-Object -Unique
          # We already installed python
          $packages.Remove('libpython3.7-dev')
          # libhomfly and texlive-generic-extra doesn't exist
          $packages.Remove('texlive-generic-extra')
          # Add a few dependencies that are not yet listed
          $packages.Add('libsingular4-dev')
          $packages.Add('liblinbox-dev')
          $packages.Add('libratpoints-dev')
          $packages.Add('libgap-dev')
          $packages.Add('ecl')
          $packages.Add('libpynac-dev')

          echo "Install the following packages:" @packages
          & apt-get install -y @packages
        shell: pwsh
      - name: Set up cache
        uses: actions/cache@v1
        with:
          path: src/.venv
          key: venv-runner.os-${{ hashFiles('src/Pipfile.lock') }}
      - name: Create virtual environment
        run: cd src && mkdir -p .venv && pipenv install --dev --skip-lock --verbose && pipenv run pip list
        env:
          ARB_LIBRARY: flint-arb
          PIP_NO_BUILD_ISOLATION: false
      # The following is for testing purposes in case the pipenv install above fails
      - name: Install editable manually
        run: cd src && pipenv run pip install -e . --verbose --upgrade --exists-action=i --no-build-isolation
        if: always()
        env:
          ARB_LIBRARY: flint-arb
      - name: Test
        run: cd src && pipenv run python -c 'import sage.all; import sage.doctest.control; sage.doctest.control.run_doctests(sage)'
