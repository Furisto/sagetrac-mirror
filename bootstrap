#!/usr/bin/env bash

########################################################################
# Regenerate auto-generated files (e.g. configure)
#
# If the -s option is given, save the autogenerated scripts in
# $SAGE_ROOT/upstream/configure-$CONFVERSION.tar.gz where CONFVERSION
# is the version number stored in
# build/pkgs/configure/package-version.txt
#
# If optional argument -i is given, then automatically increment the
# version number.
#
# If optional argument -d is given and bootstrapping failed, instead
# extract the files from a local configure tarball, downloading it if
# needed. If -D is given, don't try to bootstrap and always extract or
# donwload.
########################################################################

# Either run this script from SAGE_ROOT or make sure that SAGE_ROOT
# is set
test -z "$SAGE_ROOT" || cd "$SAGE_ROOT"

PKG=build/pkgs/configure
MAKE="${MAKE:-make}"
CONFVERSION=`cat $PKG/package-version.txt`
if [ -z "$LIBTOOLIZE" ]; then
    case `uname` in
        Darwin*) LIBTOOLIZE=glibtoolize;;
        *) LIBTOOLIZE=libtoolize;;
    esac
fi

bootstrap () {
    # SAGE_ROOT and c_lib are two independent autotools projects
    # sharing a top-level m4 and config directory.
    aclocal -I m4 && \
    automake --add-missing --copy build/Makefile-auto && \
    autoconf && \
    (
        cd src/c_lib && \
        autoheader && \
        $LIBTOOLIZE --copy && \
        aclocal && \
        automake --add-missing --copy && \
        autoconf
    )

    st=$?
    case $st in
        0) true;; # Success

        *)
            if [ $DOWNLOAD = yes ]; then
                echo >&2 "Bootstrap failed, downloading required files instead."
                bootstrap-download || exit $?
            else
                if [ $st -eq 127 ]; then
                    verb="install"
                else
                    verb="upgrade"
                fi
                echo >&2 "Bootstrap failed. Either fix the error above or $verb autotools or"
                echo >&2 "run bootstrap with the -d option to download the auto-generated files."
                exit $st
            fi;;
    esac
}

# Bootstrap by downloading the auto-generated files
bootstrap-download () {
    source src/bin/sage-env

    mkdir upstream 2>/dev/null
    if [ ! -f $CONFBALL ]; then
        sage-download-file $SAGE_UPSTREAM/configure/configure-$CONFVERSION.tar.gz >$CONFBALL
        if [ $? -ne 0 ]; then
            rm -f "$CONFBALL"
            echo >&2 "Error: downloading configure-$CONFVERSION.tar.gz failed"
            exit 1
        fi
    fi

    tar xzf $CONFBALL || exit $?
}

save () {
    set -e

    # Create configure tarball
    echo "Creating $CONFBALL..."
    mkdir -p upstream
    tar zcf "$CONFBALL" configure config/* build/Makefile-auto.in \
        src/c_lib/configure src/c_lib/config.h.in src/c_lib/Makefile.in \
        src/c_lib/include/Makefile.in src/c_lib/src/Makefile.in
    
    # Update version number
    echo "$CONFVERSION" >$PKG/package-version.txt
    
    # Compute checksum
    SAGE_ROOT=. src/bin/sage-fix-pkg-checksums "$CONFBALL"
}


usage () {
    echo >&2 "Usage: $0 [-d|-D|-s] [-i] [-h]"
}


# Parse options
SAVE=no
DOWNLOAD=no
ALWAYSDOWNLOAD=no
while getopts "Ddsih" OPTION
do
     case "$OPTION" in
         D) ALWAYSDOWNLOAD=yes; DOWNLOAD=yes;;
         d) DOWNLOAD=yes;;
         s) SAVE=yes;;
         i) CONFVERSION=$(( CONFVERSION + 1 ));;
         h) usage; exit 0;;
         ?) usage; exit 2;;
     esac
done
CONFBALL="upstream/configure-$CONFVERSION.tar.gz"

if [ $DOWNLOAD$SAVE = yesyes ]; then
    echo >&2 "$0: refusing to download and save."
    usage
    exit 2
fi

# Start cleanly (it's not a problem if this fails)
$MAKE bootstrap-clean 2>/dev/null
mkdir config 2>/dev/null

if [ $ALWAYSDOWNLOAD = yes ]; then
    bootstrap-download || exit $?
else
    bootstrap
fi

if [ $SAVE = yes ]; then
    save
fi
