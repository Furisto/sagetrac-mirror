
# AUTHORS:
# - Carl Witty and William Stein: initial version
# - Craig Citro: add options for not loading profile
# - Martin Albrecht: fix zshell prompt (#11866)
# - John Palmieri: shorten the prompts, and don't print messages if
#   there are more arguments to 'sage -sh' (#11790)

# If $SHELL is unset, default to bash
if [ -z "$SHELL" ]; then
    export SHELL=bash
fi
# We must start a new shell with no .profile or .bashrc files
# processed, so that we know our path is correct
SHELL_NAME=`basename "$SHELL"`
# Check for SAGE_SHPROMPT.  If defined, use for the prompt.  If
# not, check for already-defined $PS1, and if defined use that.
# $PS1 should only be available if it is defined in
# $DOT_SAGE/sagerc.
if [ -n "$SAGE_SHPROMPT" ]; then
    oldPS1=$SAGE_SHPROMPT
elif [ -n "$PS1" ]; then
    oldPS1=$PS1
fi
# Set the default prompt.  If available, use reverse video to
# highlight the string "(sage-sh)".
if tput rev &>/dev/null; then
    color_prompt=yes
fi
case "$SHELL_NAME" in
    bash)
        SHELL_OPTS="--norc"
        if [ "$color_prompt" = yes ]; then
            PS1="\[$(tput rev)\](sage-sh)\[$(tput sgr0)\] \u@\h:\W\$ "
        else
            PS1="(sage-sh) \u@\h:\w\$ "
        fi
        export PS1
        ;;
    csh)
        # csh doesn't seem to allow the specification of a different
        # .cshrc file, and the prompt can only be set in this file, so
        # don't bother changing the prompt.
        SHELL_OPTS="-f"
        ;;
    ksh)
        SHELL_OPTS="-p"
        if [ "$color_prompt" = yes ] ; then
            PS1="$(tput rev)(sage-sh)$(tput sgr0) $USER@`hostname -s`:\${PWD##*/}$ "
        else
            PS1="(sage-sh) $USER@`hostname -s`:\${PWD##*/}$ "
        fi
        export PS1
        ;;
    sh)
        # We don't really know which shell "sh" is (it could be
        # bash, but this is not guaranteed), so we don't set
        # SHELL_OPTS.
        if [ "$color_prompt" = yes ] ; then
            PS1="$(tput rev)(sage-sh)$(tput sgr0) $USER@`hostname -s`:\${PWD##*/}$ "
        else
            PS1="(sage-sh) $USER@`hostname -s`:\${PWD}$ "
        fi
        export PS1
        ;;
    tcsh)
        # tcsh doesn't seem to allow the specification of a different
        # .tcshrc file, and the prompt can only be set in this file, so
        # don't bother changing the prompt.
        SHELL_OPTS="-f"
        ;;
    zsh)
        PS1="%S(sage-sh)%s %n@%m:%~$ "
        # In zsh, the system /etc/zshenv is *always* run,
        # and this may change the path (like on OSX), so we'll
        # create a temporary .zshenv to reset the path
        ZDOTDIR=$DOT_SAGE && export ZDOTDIR
        cat >"$ZDOTDIR/.zshenv" <<EOF
PATH="$PATH" && export PATH
EOF
        SHELL_OPTS=" -d"
        export PS1
        ;;
    *)
        export PS1='(sage-sh) $ '
        ;;
esac
if [ -n "$oldPS1" ]; then
    PS1="$oldPS1"
    export PS1
fi
if [ $# -eq 0 ]; then
    # No arguments, so print informative message...
    echo >&2
    echo >&2 "Starting subshell with Sage environment variables set.  Don't forget"
    echo >&2 "to exit when you are done.  Beware:"
    echo >&2 " * Do not do anything with other copies of Sage on your system."
    echo >&2 " * Do not use this for installing Sage packages using \"sage -i\" or for"
    echo >&2 "   running \"make\" at Sage's root directory.  These should be done"
    echo >&2 "   outside the Sage shell."
    echo >&2
    if [ -n "$SHELL_OPTS" ]; then
        echo >&2 "Bypassing shell configuration files..."
        echo >&2
    fi
    echo >&2 "Note: SAGE_ROOT=$SAGE_ROOT"
    "$SHELL" $SHELL_OPTS "$@"
    status=$?
    echo "Exited Sage subshell." 1>&2
else
    exec "$SHELL" $SHELL_OPTS "$@"
    # If 'exec' returns, an error occurred:
    status=$?
    echo >&2 "Fatal error: 'exec \"$SHELL\" \"$@\"' failed!"
fi
exit $status
