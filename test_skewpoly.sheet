### Load skew polynomials compiled Cython part
load("skewpoly.spyx")
print("Loaded")
### Load skew polynomials pure Python part
load("skewpoly.py")
print("Loaded")

### Test finite field
k.<a> = GF(3^2,'a')
sigma = k.frobenius_endomorphism()
S.<x> = SkewPolynomialRing(k, sigma)
print S

### This segfaults
a * x

###
from sage.categories.pushout import pushout
pushout(k, S)


### Test non-finite field
R.<t> = QQ[]
sigma = R.hom([t+1])
S.<x> = SkewPolynomialRing(R, sigma)
print S
p = t * x + x 

###
p = t * x


### skew_polynomial_element.pyx:30 and onwards
a = t + x + 1; a
b = S([t^2,t+1,1]); b
c = x^3 + (-95*t^2 + t + 2)*x^2 + (-t^2 + t)*x + 2*t - 8
print a * b
print b * a
print a + b 
print a - b 
print b^2
print b^2 == b * b

###
q,r = c.quo_rem(b,side=Left) # BOOM

### 
from sage.categories.pushout import pushout
print pushout(R, S)




# For installed skew polynomials

### Test finite field
k.<a> = GF(3^2,'a')
sigma = k.frobenius_endomorphism()
S.<x> = k['x', sigma]
print S

(a + x) + x
