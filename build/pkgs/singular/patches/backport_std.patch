diff --git a/Singular/iparith.cc b/Singular/iparith.cc
index 8217811..79a80cf 100644
--- a/Singular/iparith.cc
+++ b/Singular/iparith.cc
@@ -3293,13 +3293,14 @@ static BOOLEAN jjSTD_1(leftv res, leftv u, leftv v)
   ideal result;
   assumeStdFlag(u);
   ideal i1=(ideal)(u->Data());
+  int ii1=idElem(i1); /* size of i1 */
   ideal i0;
   int r=v->Typ();
   if ((/*v->Typ()*/r==POLY_CMD) ||(r==VECTOR_CMD))
   {
-    i0=idInit(1,i1->rank); // TODO: rank is wrong (if v is a vector!)
-    i0->m[0]=(poly)v->Data();
-    int ii0=idElem(i0); /* size of i0 */
+    poly p=(poly)v->Data();
+    i0=idInit(1,i1->rank);
+    i0->m[0]=p;
     i1=idSimpleAdd(i1,i0); //
     memset(i0->m,0,sizeof(poly)*IDELEMS(i0));
     idDelete(&i0);
@@ -3323,9 +3324,9 @@ static BOOLEAN jjSTD_1(leftv res, leftv u, leftv v)
     BITSET save1;
     SI_SAVE_OPT1(save1);
     si_opt_1|=Sy_bit(OPT_SB_1);
-    /* ii0 appears to be the position of the first element of il that
+    /* ii1 appears to be the position of the first element of il that
        does not belong to the old SB ideal */
-    result=kStd(i1,currRing->qideal,hom,&w,NULL,0,ii0);
+    result=kStd(i1,currRing->qideal,hom,&w,NULL,0,ii1);
     SI_RESTORE_OPT1(save1);
     idDelete(&i1);
     idSkipZeroes(result);
@@ -3335,7 +3336,6 @@ static BOOLEAN jjSTD_1(leftv res, leftv u, leftv v)
   else /*IDEAL/MODULE*/
   {
     i0=(ideal)v->CopyD();
-    int ii0=idElem(i0); /* size of i0 */
     i1=idSimpleAdd(i1,i0); //
     memset(i0->m,0,sizeof(poly)*IDELEMS(i0));
     idDelete(&i0);
@@ -3349,6 +3349,7 @@ static BOOLEAN jjSTD_1(leftv res, leftv u, leftv v)
         // no warnung: this is legal, if i in std(i,p)
         // is homogeneous, but p not
         w=NULL;
+        hom=isNotHomog;
       }
       else
       {
@@ -3356,20 +3357,13 @@ static BOOLEAN jjSTD_1(leftv res, leftv u, leftv v)
         hom=isHomog;
       }
     }
-    if (ii0*4 >= 3*IDELEMS(i1)) // MAGIC: add few poly to large SB: 3/4
-    {
-      BITSET save1;
-      SI_SAVE_OPT1(save1);
-      si_opt_1|=Sy_bit(OPT_SB_1);
-      /* ii0 appears to be the position of the first element of il that
-       does not belong to the old SB ideal */
-      result=kStd(i1,currRing->qideal,hom,&w,NULL,0,ii0);
-      SI_RESTORE_OPT1(save1);
-    }
-    else
-    {
-      result=kStd(i1,currRing->qideal,hom,&w);
-    }
+    BITSET save1;
+    SI_SAVE_OPT1(save1);
+    si_opt_1|=Sy_bit(OPT_SB_1);
+    /* ii1 appears to be the position of the first element of i1 that
+     does not belong to the old SB ideal */
+    result=kStd(i1,currRing->qideal,hom,&w,NULL,0,ii1);
+    SI_RESTORE_OPT1(save1);
     idDelete(&i1);
     idSkipZeroes(result);
     if (w!=NULL) atSet(res,omStrDup("isHomog"),w,INTVEC_CMD);
diff --git a/kernel/GBEngine/kutil.cc b/kernel/GBEngine/kutil.cc
index 1f11e97..d83b64d 100644
--- a/kernel/GBEngine/kutil.cc
+++ b/kernel/GBEngine/kutil.cc
@@ -8559,8 +8559,7 @@ void initSSpecial (ideal F, ideal Q, ideal P,kStrategy strat)
         h.p = pCopy(Q->m[i]);
         //if (TEST_OPT_INTSTRATEGY)
         //{
-        //  //pContent(h.p);
-        //  h.pCleardenom(); // also does a pContent
+        //  h.pCleardenom(); // also does remove Content
         //}
         //else
         //{
@@ -8598,7 +8597,7 @@ void initSSpecial (ideal F, ideal Q, ideal P,kStrategy strat)
       {
         deleteHC(&h,strat);
       }
-      else
+      else if (TEST_OPT_REDTAIL || TEST_OPT_REDSB)
       {
         h.p=redtailBba(h.p,strat->sl,strat);
       }
@@ -8634,7 +8633,7 @@ void initSSpecial (ideal F, ideal Q, ideal P,kStrategy strat)
         if (rHasGlobalOrdering(currRing))
         {
           h.p=redBba(h.p,strat->sl,strat);
-          if (h.p!=NULL)
+          if ((h.p!=NULL)&&(TEST_OPT_REDTAIL || TEST_OPT_REDSB))
           {
             h.p=redtailBba(h.p,strat->sl,strat);
           }
@@ -8779,7 +8778,7 @@ void initSSpecialSba (ideal F, ideal Q, ideal P,kStrategy strat)
         if (rHasGlobalOrdering(currRing))
         {
           h.p=redBba(h.p,strat->sl,strat);
-          if (h.p!=NULL)
+          if ((h.p!=NULL)&&(TEST_OPT_REDTAIL || TEST_OPT_REDSB))
           {
             h.p=redtailBba(h.p,strat->sl,strat);
           }
