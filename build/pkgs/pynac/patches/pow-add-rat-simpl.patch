diff --git a/ginac/power.cpp b/ginac/power.cpp
index a19fd45..abdaf40 100644
--- a/ginac/power.cpp
+++ b/ginac/power.cpp
@@ -684,8 +684,11 @@ ex power::eval(int level) const
                         if (is_exactly_a<mul>(ebasis)) {
                                 return expand_mul(ex_to<mul>(ebasis), num_exponent, 0);
                         }
+                }
 
+		if (num_exponent.is_rational()) {
                         // (2*x + 6*y)^(-4) -> 1/16*(x + 3*y)^(-4)
+                        // (4*x + 12*y)^(3/2) -> 8*(x + 3*y)^(3/2)
                         if (is_exactly_a<add>(ebasis)) {
                                 numeric icont = ebasis.integer_content();
                                 const numeric lead_coeff = 
@@ -693,12 +696,15 @@ ex power::eval(int level) const
                                                         lead_coeff()).div(icont);
 
                                 const bool canonicalizable = lead_coeff.is_integer();
-                                const bool unit_normal = lead_coeff.is_pos_integer() || lead_coeff.is_parent_pos_char();
-                                if (canonicalizable && (! unit_normal))
-                                        icont = icont.mul(*_num_1_p);
-
-                                if (canonicalizable and not icont.is_one()) {
-                                        const add& addref = ex_to<add>(ebasis);
+                                const add& addref = ex_to<add>(ebasis);
+                                const bool unit_normal = lead_coeff.is_positive() || lead_coeff.is_parent_pos_char();
+                                if (canonicalizable
+                                    and (! unit_normal)
+                                    and num_exponent.denom().is_one())
+                                        icont = icont.negative();
+
+                                if (canonicalizable
+                                    and not icont.is_one()) {
                                         auto  addp = new add(addref);
                                         addp->setflag(status_flags::dynallocated);
                                         addp->clearflag(status_flags::hash_calculated);
@@ -707,9 +713,9 @@ ex power::eval(int level) const
                                         for (auto & elem : addp->seq)
                                                 elem.coeff = ex_to<numeric>(elem.coeff).div_dyn(icont);
 
-                                        const numeric c = icont.pow_intexp(num_exponent);
-                                        if (likely(not c.is_one()))
-                                                return (new mul(power(*addp, num_exponent), c))->setflag(status_flags::dynallocated);
+                                        ex root = icont.power(num_exponent);
+                                        if (likely(not root.is_integer_one()))
+                                                return (new mul(power(*addp, num_exponent), root))->setflag(status_flags::dynallocated);
                                         else
                                                 return power(*addp, num_exponent);
                                 }
