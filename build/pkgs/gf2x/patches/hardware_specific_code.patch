diff -druN gf2x-1.1.orig/configure.ac gf2x-1.1/configure.ac
--- gf2x-1.1.orig/configure.ac	2012-05-31 13:53:47.000000000 -0700
+++ gf2x-1.1/configure.ac	2014-01-14 03:04:24.989182293 -0800
@@ -35,6 +35,12 @@
 AC_ARG_ENABLE([ntl-checks],
               [AS_HELP_STRING([--enable-ntl-checks],
                               [Turn on ntl checks])])
+
+AC_ARG_ENABLE([hardware-specific-code],
+              [AS_HELP_STRING([--enable-hardware-specific-code],
+                              [Turn on all cpu-dependent optimized code (default is yes)])],
+              [],[enable_hardware_specific_code=yes])
+
 AC_ARG_ENABLE([sse2],
               [AS_HELP_STRING([--enable-sse2],
                               [Turn on sse-2 code (default is yes)])])
@@ -62,9 +68,12 @@
 AC_SUBST([GF2X_WORDSIZE], [$gf2x_wordsize])
 
 
-CHECK_SSE2_SUPPORT()
-
-CHECK_PCLMUL_SUPPORT()
+if test "x${enable_hardware_specific_code}" = xno ; then
+ echo "Not using hardware-specific code due to --disable-hardware-specific-code flag"
+else
+ CHECK_SSE2_SUPPORT()
+ CHECK_PCLMUL_SUPPORT()
+fi
 
 : ${ABI='default'}
 
@@ -76,42 +85,45 @@
  # Our _default_ setting for hwdir is to use 8*sizeof(ulong).
  hwdir=generic$gf2x_wordsize
 
- # Yet there are several situations in which we select another directory.
- # This refined selection mechanism is impacted by the ABI= setting.
- case "$target_cpu" in
-  # All 32-bit pentium patterns
-  i?86|pentium*|athlon|prescott)
-   if test "$gf2x_cv_cc_supports_sse2" = "no" ; then
-    hwdir=x86_nosse2
-   else
-    hwdir=x86_sse2
-    # Maybe on some funny platform from hell, we could get i386 yet have a
-    # 64-bit cpu ?
-    if test x$ABI = x64 ; then
-     hwdir=x86_64
+
+ if test "x${enable_hardware_specific_code}" = xyes ; then
+  # Yet there are several situations in which we select another directory.
+  # This refined selection mechanism is impacted by the ABI= setting.
+  case "$target_cpu" in
+   # All 32-bit pentium patterns
+   i?86|pentium*|athlon|prescott)
+    if test "$gf2x_cv_cc_supports_sse2" = "no" ; then
+     hwdir=x86_nosse2
+    else
+     hwdir=x86_sse2
+     # Maybe on some funny platform from hell, we could get i386 yet have a
+     # 64-bit cpu ?
+     if test x$ABI = x64 ; then
+      hwdir=x86_64
+     fi
     fi
-   fi
-   ;;
-  core2|opteron|x86_64|nocona|k10)
-   # Note: could set to something else if we have separate tuning files.
-   if test "$gf2x_cv_cc_supports_pclmul" = "no" ; then
-     hwdir=x86_64
-   else
-     hwdir=x86_64_pclmul
-   fi
-   if test x$ABI = x32 ; then
-    hwdir=x86_sse2
-   elif test x$ABI = xdefault ; then
-    RUNTIME_ULONG_BITS()
-    case x$gf2x_cv_ulongbits in
-     x64|xdontknow) true ;;
-     *)
-       AC_MSG_WARN([The default ABI for this compiler has $gf2x_cv_ulongbits-bit unsigned longs, not 64-bit as the CPU supports. Using $gf2x_cv_ulongbits-bit])
-       hwdir=x86_sse2;;
-    esac
-   fi
-   ;;
- esac
+    ;;
+   core2|opteron|x86_64|nocona|k10)
+    # Note: could set to something else if we have separate tuning files.
+    if test "$gf2x_cv_cc_supports_pclmul" = "no" ; then
+      hwdir=x86_64
+    else
+      hwdir=x86_64_pclmul
+    fi
+    if test x$ABI = x32 ; then
+     hwdir=x86_sse2
+    elif test x$ABI = xdefault ; then
+     RUNTIME_ULONG_BITS()
+     case x$gf2x_cv_ulongbits in
+      x64|xdontknow) true ;;
+      *)
+        AC_MSG_WARN([The default ABI for this compiler has $gf2x_cv_ulongbits-bit unsigned longs, not 64-bit as the CPU supports. Using $gf2x_cv_ulongbits-bit])
+        hwdir=x86_sse2;;
+     esac
+    fi
+    ;;
+  esac
+ fi
 else
  AC_MSG_NOTICE([Using supplied hwdir value $hwdir])
 fi
diff -druN gf2x-1.1.orig/configure gf2x-1.1/configure
--- gf2x-1.1.orig/configure	2012-05-31 13:54:00.000000000 -0700
+++ gf2x-1.1/configure	2014-01-14 03:05:34.479189242 -0800
@@ -756,6 +756,7 @@
 with_sysroot
 enable_libtool_lock
 enable_ntl_checks
+enable_hardware_specific_code
 enable_sse2
 enable_pclmul
 with_compile_warnings
@@ -1403,6 +1404,9 @@
   --enable-dependency-tracking   do not reject slow dependency extractors
   --disable-libtool-lock  avoid locking (might break parallel builds)
   --enable-ntl-checks     Turn on ntl checks
+  --enable-hardware-specific-code
+                          Turn on all cpu-dependent optimized code (default is
+                          yes)
   --enable-sse2           Turn on sse-2 code (default is yes)
   --enable-pclmul         Turn on pclmul code (default is yes)
 
@@ -11513,6 +11517,15 @@
   enableval=$enable_ntl_checks;
 fi
 
+
+# Check whether --enable-hardware-specific-code was given.
+if test "${enable_hardware_specific_code+set}" = set; then :
+  enableval=$enable_hardware_specific_code;
+else
+  enable_hardware_specific_code=yes
+fi
+
+
 # Check whether --enable-sse2 was given.
 if test "${enable_sse2+set}" = set; then :
   enableval=$enable_sse2;
@@ -16337,6 +16350,9 @@
 
 
 
+if test "x${enable_hardware_specific_code}" = xno ; then
+ echo "Not using hardware-specific code due to --disable-hardware-specific-code flag"
+else
 
  ac_save_CFLAGS=$CFLAGS
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC can compile and run sse-2 code" >&5
@@ -16473,7 +16489,6 @@
  fi
 
 
-
  ac_save_CFLAGS="$CFLAGS"
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC can compile pclmulqdq and if it is supported by the hardware" >&5
 $as_echo_n "checking whether $CC can compile pclmulqdq and if it is supported by the hardware... " >&6; }
@@ -16644,6 +16659,7 @@
 
  fi
 
+fi
 
 : ${ABI='default'}
 
@@ -16732,32 +16748,34 @@
  # Our _default_ setting for hwdir is to use 8*sizeof(ulong).
  hwdir=generic$gf2x_wordsize
 
- # Yet there are several situations in which we select another directory.
- # This refined selection mechanism is impacted by the ABI= setting.
- case "$target_cpu" in
-  # All 32-bit pentium patterns
-  i?86|pentium*|athlon|prescott)
-   if test "$gf2x_cv_cc_supports_sse2" = "no" ; then
-    hwdir=x86_nosse2
-   else
-    hwdir=x86_sse2
-    # Maybe on some funny platform from hell, we could get i386 yet have a
-    # 64-bit cpu ?
-    if test x$ABI = x64 ; then
-     hwdir=x86_64
+
+ if test "x${enable_hardware_specific_code}" = xyes ; then
+  # Yet there are several situations in which we select another directory.
+  # This refined selection mechanism is impacted by the ABI= setting.
+  case "$target_cpu" in
+   # All 32-bit pentium patterns
+   i?86|pentium*|athlon|prescott)
+    if test "$gf2x_cv_cc_supports_sse2" = "no" ; then
+     hwdir=x86_nosse2
+    else
+     hwdir=x86_sse2
+     # Maybe on some funny platform from hell, we could get i386 yet have a
+     # 64-bit cpu ?
+     if test x$ABI = x64 ; then
+      hwdir=x86_64
+     fi
     fi
-   fi
-   ;;
-  core2|opteron|x86_64|nocona|k10)
-   # Note: could set to something else if we have separate tuning files.
-   if test "$gf2x_cv_cc_supports_pclmul" = "no" ; then
-     hwdir=x86_64
-   else
-     hwdir=x86_64_pclmul
-   fi
-   if test x$ABI = x32 ; then
-    hwdir=x86_sse2
-   elif test x$ABI = xdefault ; then
+    ;;
+   core2|opteron|x86_64|nocona|k10)
+    # Note: could set to something else if we have separate tuning files.
+    if test "$gf2x_cv_cc_supports_pclmul" = "no" ; then
+      hwdir=x86_64
+    else
+      hwdir=x86_64_pclmul
+    fi
+    if test x$ABI = x32 ; then
+     hwdir=x86_sse2
+    elif test x$ABI = xdefault ; then
 
     if test x$gf2x_cv_ulongbits = x ; then
     { $as_echo "$as_me:${as_lineno-$LINENO}: checking the number of bits in an unsigned long" >&5
@@ -16825,16 +16843,17 @@
 $as_echo "$gf2x_cv_ulongbits" >&6; }
     fi
 
-    case x$gf2x_cv_ulongbits in
-     x64|xdontknow) true ;;
-     *)
-       { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: The default ABI for this compiler has $gf2x_cv_ulongbits-bit unsigned longs, not 64-bit as the CPU supports. Using $gf2x_cv_ulongbits-bit" >&5
+     case x$gf2x_cv_ulongbits in
+      x64|xdontknow) true ;;
+      *)
+        { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: The default ABI for this compiler has $gf2x_cv_ulongbits-bit unsigned longs, not 64-bit as the CPU supports. Using $gf2x_cv_ulongbits-bit" >&5
 $as_echo "$as_me: WARNING: The default ABI for this compiler has $gf2x_cv_ulongbits-bit unsigned longs, not 64-bit as the CPU supports. Using $gf2x_cv_ulongbits-bit" >&2;}
-       hwdir=x86_sse2;;
-    esac
-   fi
-   ;;
- esac
+        hwdir=x86_sse2;;
+     esac
+    fi
+    ;;
+  esac
+ fi
 else
  { $as_echo "$as_me:${as_lineno-$LINENO}: Using supplied hwdir value $hwdir" >&5
 $as_echo "$as_me: Using supplied hwdir value $hwdir" >&6;}
