###########################################
## Python
###########################################

CUR=`pwd`

# It is best to unset these environment variables, as they might confuse
# the Python installer.
unset PYTHONHOME
unset PYTHONPATH

# Prevent use of the system hg and svn as it might make the installation fail
export HAS_HG=no
export SVNVERSION=no

cd src

if [ "$SAGE_DEBUG" = "yes" ]; then
    echo "Building Python with pydebug"
    PYTHON_CONFIGURE="$PYTHON_CONFIGURE --with-pydebug"
fi

# pymalloc screws with valgrind, so let's disable it
if [ "$SAGE_VALGRIND" = "yes" ]; then
    echo "Building Python without pymalloc"
    PYTHON_CONFIGURE="$PYTHON_CONFIGURE --without-pymalloc"
fi

# Use EXTRA_CFLAGS for user-defined CFLAGS since Python puts its own
# default flags like -O3 after CFLAGS but before EXTRA_CFLAGS.
# We also disable warnings about unused variables/functions which are
# common in Cython-generated code.
export EXTRA_CFLAGS="`testcflags.sh -Wno-unused` $CFLAGS"
unset CFLAGS

if [ "$UNAME" = Darwin ]; then
    PYTHON_CONFIGURE="--disable-toolbox-glue $PYTHON_CONFIGURE"
    # Workaround for El Capitan, Trac #19626
    xcode=$(xcode-select --print-path)
    mkdir "$CUR"/include
    cp -rp "${xcode}"/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-migrator/sdk/MacOSX.sdk/usr/include/openssl "$CUR"/include
    export CFLAGS="-I$CUR/include"
    if [ $MACOSX_VERSION -ge 16 ]; then
        echo "OS X 10.$[$MACOSX_VERSION-4] Building with clang."
        CC=clang
    fi
elif [ "$UNAME" = SunOS ]; then
    # Enable some C99 features on Solaris. This in particular enables
    # the isinf() and isfinite() functions. It works both for C and
    # C++ code (which is not true for -std=c99).
    # See http://trac.sagemath.org/sage_trac/ticket/14265
    export CFLAGS="-D__C99FEATURES__"
fi

if [ "$SAGE64" = yes ]; then
    echo "64 bit build of Python enabled"
    export CC="$CC -m64"
fi

# Remove old symbolic link: it is not needed and its presence can
# interfere with the Python build.
rm -f "$SAGE_LOCAL/lib/python"

./configure --prefix="$SAGE_LOCAL" --libdir="$SAGE_LOCAL/lib" \
    --enable-unicode=ucs4 --enable-shared $PYTHON_CONFIGURE

if [ $? -ne 0 ]; then
    echo >&2 "Error configuring Python."
    exit 1
fi

$MAKE
if [ $? -ne 0 ]; then
    echo >&2 "Error building Python."
    exit 1
fi

# On OS X, test to see if _scproxy built before installing.
if [ "$UNAME" = "Darwin" ]; then
    if [ -z `find build -name _scproxy.so` ]; then
        echo >&2 "Error: the _scproxy module failed to build."
        exit 1
    fi
fi

if [ "$UNAME" = "Linux" ]; then
    export LD_LIBRARY_PATH="."
fi

# When building on a case-insensitive filesystem (on any OS, not just Windows)
# the Python executable is output to the build directory as 'python.exe'
if [ -f "python.exe" ]; then
    PYTHON="./python.exe"
else
    PYTHON="./python"
fi

# Make sure extension modules were built correctly.
# All these modules are important and if any one
# fails to build, Sage will not work.

echo "Testing importing of various modules..."
import_errors=false
for module in ctypes math hashlib crypt readline socket ; do
    if $PYTHON -c "import $module"; then
        echo "$module module imported OK"
    else
        echo >&2 "$module module failed to import"
        import_errors=true
    fi
done

if [ "$UNAME" = "Darwin" ]; then
    if $PYTHON -c "import _scproxy"; then
        echo "_scproxy module imported OK"
    else
        echo >&2 "_scproxy module failed to import"
        import_errors=true
    fi
fi

if $import_errors; then
    echo >&2 "Error: One or more modules failed to import."
    exit 1
fi
