"""
(Lie) Subalgebras of Lie Algebras

AUTHORS:

- Travis Scrimshaw (2013-05-03): Initial version
"""

#*****************************************************************************
#  Copyright (C) 2013 Travis Scrimshaw <tscrim@ucdavis.edu>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#
#    This code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty
#    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  See the GNU General Public License for more details; the full text
#  is available at:
#
#                  http://www.gnu.org/licenses/
#*****************************************************************************

from sage.misc.cachefunc import cached_method
from sage.misc.lazy_attribute import lazy_attribute
from sage.structure.parent import Parent
from sage.structure.unique_representation import UniqueRepresentation
from sage.categories.homset import Hom
from sage.categories.morphism import Morphism
from sage.algebras.lie_algebras.lie_algebra import LieAlgebra
from sage.algebras.lie_algebras.lie_algebra_element import LieAlgebraElementWrapper
from sage.rings.all import ZZ

# TODO: A class for finite dimensional subalgebras so we can give an echonized basis
class LieSubalgebra(LieAlgebra):
    r"""
    The Lie subalgebra `\mathfrak{h}` of a Lie algebra `\mathfrak{g}`.
    """
    def __init__(self, ambient, gens, names=None, index_set=None, category=None):
        """
        Initialize ``self``.

        INPUT:

        - ``ambient`` -- the ambient Lie algebra

        - ``gens`` -- the generators for this subalgebra

        - ``names`` -- (optional) the names for the generators

        - ``index_set`` -- (optional) the index set for the generators

        - ``category`` -- (optional) the category

        EXAMPLES::
        """
        self._ambient = ambient
        self._gens = gens
        category = ambient.category().or_subcategory(category)
        if names is None and index_set is None:
            index_set = range(len(gens))
        LieAlgebra.__init__(self, ambient.base_ring(), names, index_set, category)

    def _repr_(self):
        """
        Return a string representation of ``self``.
        """
        return "Subalgebra generated by {} of {}".format(self.gens(), self._ambient)

    @cached_method
    def gens(self):
        """
        Return the generators of ``self``.
        """
        return tuple(self.element_class(self, g) for g in self._gens)

    def subalgebra(self, gens, names=None, index_set=None, category=None):
        r"""
        Return the subalgebra of ``self`` generated by ``gens``.
        """
        return LieSubalgebra(self._ambient, map(lambda x: x.value, gens),
                             names, index_set, category)

    def free_module(self):
        r"""
        Return ``self`` as (a subspace of) a free module.
        """
        return self._ambient.free_module().subspace(map(lambda x: x.to_vector(), self.basis()))

    @lazy_attribute
    def ambient_lift(self):
        r"""
        Return the morphism which lifts an element of ``self`` to
        the ambient Lie algebra.
        """
        return AmbientLiftMorphism(self, self._ambient)

    class Element(LieAlgebraElementWrapper):
        r"""
        An element in a Lie subalgebra.
        """
        def _bracket_(self, rhs):
            r"""
            Return the bracket ``[self, rhs]``.

            EXAMPLES::
            """
            return self.__class__(self.parent(), self.value.bracket(rhs.value))

        def __iter__(self):
            r"""
            Iterate over ``self``.

            EXAMPLES::
            """
            return iter(self.value)

class AmbientLiftMorphism(Morphism):
    r"""
    The natural lifting morphism from a Lie subalgebra to its
    ambient Lie algebra.
    """
    def __init__(self, domain, codomain):
        r"""
        Initialize ``self``.

        EXAMPLES::
        """
        Morphism.__init__(self, Hom(domain, codomain))

    def _repr_type(self):
        r"""
        Return a string representation of the type of ``self``.

        EXAMPLES::
        """
        return "Lift"

    def _call_(self, x):
        r"""
        Lift ``x`` to the ambient Lie algebra.

        EXAMPLES::
        """
        return x.value

