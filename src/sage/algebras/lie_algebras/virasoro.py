"""
Virasoro Algebras

AUTHORS:

- Travis Scrimshaw (2013-05-03): Initial version
"""

#*****************************************************************************
#  Copyright (C) 2013 Travis Scrimshaw <tscrim@ucdavis.edu>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#
#    This code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty
#    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  See the GNU General Public License for more details; the full text
#  is available at:
#
#                  http://www.gnu.org/licenses/
#*****************************************************************************

from sage.misc.cachefunc import cached_method
from sage.categories.lie_algebras import LieAlgebras
from sage.algebras.lie_algebras.lie_algebra_element import LieGenerator, LieAlgebraElement
from sage.algebras.lie_algebras.lie_algebra import InfinitelyGeneratedLieAlgebra

# This is why we should use the repr_term in the parent
class RegVecFieldsGen(LieGenerator):
    r"""
    Generator class for the Lie algebra of regular vector fields
    of `\CC^{\times}`. This is known as the Witt algebra.

    REFERENCES:

    - :wikipedia:`Witt_algebra`
    """
    def _repr_(self):
        """
        Return a string representation of ``self``.

        EXAMPLES::

            sage: L = lie_algebras.regular_vector_fields(QQ)
            sage: L.d(2)
            d[2]
        """
        return "d[" + repr(self._name) + "]"

class LieAlgebraRegularVectorFields(InfinitelyGeneratedLieAlgebra):
    r"""
    The Lie algebra of regular vector fields on `C^{\times}`.

    This is the Lie algebra generated by `\{d_i\}_{i \in \ZZ}` and subject
    to the relations

    .. MATH::

        [d_i, d_j] = (j - i) d_{i+j}.
    """
    def __init__(self, R):
        """
        Initialize ``self``.

        EXAMPLES::

            sage: L = lie_algebras.regular_vector_fields(QQ)
            sage: TestSuite(L).run()
        """
        InfinitelyGeneratedLieAlgebra.__init__(self, R, category=LieAlgebras(R).WithBasis())

    def _repr_(self):
        """
        Return a string representation of ``self``.

        EXAMPLES::

            sage: lie_algebras.regular_vector_fields(QQ)
            The Lie algebra of regular vector fields over Rational Field
        """
        return "The Lie algebra of regular vector fields over {}".format(self.base_ring())

    def d(self, i):
        """
        The generator `d_i`.

        EXAMPLES::

            sage: L = lie_algebras.regular_vector_fields(QQ)
            sage: L.d(4)
            d[4]
            sage: L.d(-2)
            d[-2]
        """
        return self.element_class(self, {RegVecFieldsGen(i): self.base_ring().one()})

    def bracket_on_basis(self, x, y):
        """
        Return the bracket of the basis elements indexed by ``x`` and ``y``.

        EXAMPLES::

            sage: L = lie_algebras.regular_vector_fields(QQ)
            sage: d2 = L.d(2)
            sage: dm2 = L.d(-2)
            sage: d2.bracket(dm2) # indirect doctest
            -4*d[0]
            sage: d4 = L.d(4)
            sage: d2.bracket(d4)
            2*d[6]
            sage: L.bracket(d4, d4)
            0
        """
        i = x._name
        j = y._name
        return self._from_dict({RegVecFieldsGen(i + j): j-i})

    def _an_element_(self):
        """
        Return an element of ``self``.

        EXAMPLES::

            sage: L = lie_algebras.regular_vector_fields(QQ)
            sage: L.an_element()
            d[-1] + d[0] - 3*d[1]
        """
        return self.d(0) - 3*self.d(1) + self.d(-1)

    def some_elements(self):
        """
        Return some elements of ``self``.

        EXAMPLES::

            sage: L = lie_algebras.regular_vector_fields(QQ)
            sage: L.some_elements()
            [d[0], d[2], d[-2], d[-1] + d[0] - 3*d[1]]
        """
        return [self.d(0), self.d(2), self.d(-2), self.an_element()]

    Element = LieAlgebraElement

class CentralElement(LieGenerator):
    """
    The central element in the Virasoro algebra.
    """
    def __init__(self):
        """
        Initialize ``self``.

        EXAMPLES::

            sage: d = lie_algebras.VirasoroAlgebra(QQ)
            sage: d.c()
            c
        """
        return LieGenerator.__init__(self, 'c')

class VirasoroAlgebra(LieAlgebraRegularVectorFields):
    r"""
    The Virasoro algebra.

    This is the Lie algebra generated by `\{d_i\}_{i \in \ZZ}` and subject
    to the relations

    .. MATH::

        [d_i, d_j] = (j - i) d_{i+j} + \frac{1}{12}(j^3 - j) \delta_{i,-j} c.

    This is the universal central extension `\widetilde{\mathfrak{d}}` of the
    Lie algebra `\mathfrak{d}` of
    :class:`regular vector fields <LieAlgebraRegularVectorFields>`
    on `\CC^{\times}`.

    EXAMPLES::

        sage: d = lie_algebras.VirasoroAlgebra(QQ)

    TESTS::

        sage: d = lie_algebras.VirasoroAlgebra(QQ)
        sage: TestSuite(d).run()

    REFERENCES:

    - :wikipedia:`Virasoro_algebra`
    """
    def _repr_(self):
        """
        Return a string representation of ``self``.

        EXAMPLES::

            sage: lie_algebras.VirasoroAlgebra(QQ)
            The Virasoro algebra over Rational Field
        """
        return "The Virasoro algebra over {}".format(self.base_ring())

    @cached_method
    def c(self):
        """
        The central element in ``self``.

        EXAMPLES::

            sage: d = lie_algebras.VirasoroAlgebra(QQ)
            sage: d.c()
            c
        """
        return self.element_class(self, {CentralElement(): self.base_ring().one()})

    def bracket_on_basis(self, x, y):
        """
        Return the bracket of the basis elements indexed by ``x`` and ``y``.

        EXAMPLES::

            sage: d = lie_algebras.VirasoroAlgebra(QQ)
            sage: c = d.c()
            sage: d2 = d.d(2)
            sage: dm2 = d.d(-2)
            sage: c.bracket(d2) # indirect doctest
            0
            sage: d2.bracket(dm2)
            -4*d[0] - 1/2*c
        """
        i = x._name
        j = y._name
        if i == 'c' or j == 'c':
            return self.zero()
        ret = self._from_dict({RegVecFieldsGen(i + j): j-i})
        if i == -j:
            ret += (j**3 - j) / 12 * self.c()
        return ret

