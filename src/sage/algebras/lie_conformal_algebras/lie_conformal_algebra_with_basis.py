"""
Lie Conformal Algebras With Basis.

AUTHORS:

- Reimundo Heluani (08-09-2019): Initial implementation
"""

#******************************************************************************
#       Copyright (C) 2019 Reimundo Heluani <heluani@potuz.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#                  http://www.gnu.org/licenses/
#*****************************************************************************

from sage.categories.lie_conformal_algebras import LieConformalAlgebras
from .lie_conformal_algebra import LieConformalAlgebra
from sage.misc.cachefunc import cached_method
from sage.sets.family import Family 

class LieConformalAlgebraWithBasis(LieConformalAlgebra):
    def __init__(self,R, names=None, index_set=None, category=None):
        """
        Base class for a Lie conformal algebra with a preferred basis.

        EXAMPLES::
            
            sage: R = VirasoroLieConformalAlgebra(QQbar);R
            The Virasoro Lie conformal algebra over Algebraic Field
        """
        self._indices = index_set
        category = LieConformalAlgebras(R).WithBasis().or_subcategory(category)
        super(LieConformalAlgebraWithBasis,self).__init__(R, names, category)

    @cached_method
    def basis(self):
        r""" 
        The basis of this Lie conformal algebra.

        EXAMPLES::

            sage: Vir = VirasoroLieConformalAlgebra(QQ)
            sage: Vir.inject_variables()
            Defining L, C
            sage: B = Vir.basis(); B
            Lazy family (basis map(i))_{i in Disjoint union of Family (The Cartesian product of ({'L'}, Non negative integers), The Cartesian product of ({'C'}, {0}))}
            sage: B[('L',2)]
            T^(2)L
            sage: sorted(B[('L',3)].bracket(L).items())
            [(3, -TL), (4, -8*L), (6, -10*C)]
            sage: B[('L',0)] == L
            True

        """
        return Family(self._indices, self.monomial, name="basis map")

    def indices(self):
        """
        The index set that parametrizes the basis of this Lie conformal 
        algebra.

        EXAMPLES::

            sage: V = AffineLieConformalAlgebra(QQ, 'A2')
            sage: V.indices()
            Disjoint union of Family (The Cartesian product of ({alpha[2], alpha[1], alpha[1] + alpha[2], alphacheck[1], alphacheck[2], -alpha[2], -alpha[1], -alpha[1] - alpha[2]}, Non negative integers), The Cartesian product of ({'K'}, {0}))
            sage: Vir = VirasoroLieConformalAlgebra(QQ)
            sage: Vir.indices()
            Disjoint union of Family (The Cartesian product of ({'L'}, Non negative integers), The Cartesian product of ({'C'}, {0}))

        """
        return self._indices

    def module(self):
        r"""
        The underlying `R` module for this Lie conformal algebra.

        EXAMPLES::

            sage: Vir = VirasoroLieConformalAlgebra(QQ); Vir.module()
            Free module generated by Disjoint union of Family (The Cartesian product of ({'L'}, Non negative integers), The Cartesian product of ({'C'}, {0})) over Rational Field
            sage: V = AffineLieConformalAlgebra(QQ, 'A2'); V.module()
            Free module generated by Disjoint union of Family (The Cartesian product of ({alpha[2], alpha[1], alpha[1] + alpha[2], alphacheck[1], alphacheck[2], -alpha[2], -alpha[1], -alpha[1] - alpha[2]}, Non negative integers), The Cartesian product of ({'K'}, {0})) over Rational Field
    
        """
        from sage.combinat.free_module import CombinatorialFreeModule
        return CombinatorialFreeModule(self.base_ring(), 
                                       basis_keys=self._indices,
                                       category=self.category())

    def monomial(self,i):
        """
        The monomial of this Lie conformal algebra parametrized by this index.

        EXAMPLES::

            sage: Vir = VirasoroLieConformalAlgebra(QQ)
            sage: Vir.monomial(('L',3))
            T^(3)L
            sage: L = Vir.0; Vir.monomial(('L',4)) == 1/24*L.T(4)
            True
        
        """
        B = self.module().basis()
        return self.element_class(self, self.module()(B[i]))
    
    def zero(self): 
        """
        The zero element of this Lie conformal algebra.

        EXAMPLES::

            sage: Vir = VirasoroLieConformalAlgebra(QQ)
            sage: Vir.zero()
            0
            sage: L = Vir.0; L.nproduct(L,2) == Vir.zero()
            True
        """
        return self.element_class(self, self.module().zero())


