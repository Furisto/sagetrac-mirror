r"""
Vertex algebra ideals
AUTHORS

- Reimundo Heluani (08-09-2019): Initial implementation
"""

#******************************************************************************
#       Copyright (C) 2019 Reimundo Heluani <heluani@potuz.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#                  http://www.gnu.org/licenses/
#*****************************************************************************
from sage.modules.module import Module
from sage.categories.vertex_algebras import VertexAlgebras
from sage.combinat.partition import Partitions
from sage.combinat.partition_tuple import PartitionTuples, PartitionTuples_level

class VertexAlgebraIdeal(Module):
    def __init__(self,V,gens):
        r"""An ideal of the vertex algebra `V` generated by the list of vectors
        ``gens``. We only support ideals generated by singular vectors

        EXAMPLES::

            sage: V = VirasoroVertexAlgebra(QQ,1/2);V.find_singular(6)
            [L_-2L_-2L_-2|0>-33/8*L_-4L_-2|0>+93/64*L_-3L_-3|0>-27/16*L_-6|0>]
            sage: v = _[0]; I = V.ideal(v)
            sage: I
            ideal of The Virasoro vertex algebra at central charge 1/2 generated by (L_-2L_-2L_-2|0>-33/8*L_-4L_-2|0>+93/64*L_-3L_-3|0>-27/16*L_-6|0>,)

            sage: V = AffineVertexAlgebra(QQ,'A1',3);e = V.gen(0)
            sage: I = V.ideal(e)
            Traceback (most recent call last):
            ...
            ValueError: Generators must be singular vectors of The universal affine vertex algebra of CartanType ['A', 1] at level 3

        """


        if V not in VertexAlgebras(V.base_ring()).Graded().FinitelyGenerated():
            raise ValueError ("V needs to be a finitely and strongly generated "
                    "vertex algebra, got {}".format(V) )
        if type(gens[0]) in [tuple,list]:
            gens = tuple(gens[0])
        if not all(g.is_singular() for g in gens):
            raise ValueError ("Generators must be singular vectors of {}"\
                .format(V))
        super(VertexAlgebraIdeal,self).__init__(V.base_ring(), 
            category=V.category().Subobjects())
        self._gens = gens
        self._ambient = V

    def _repr_(self):
        return "ideal of {0} generated by {1}".format(self._ambient, self._gens)
    def get_degree(self,n):
        r"""Returns the homogeneous component of degree ``n`` in the ideal

        EXAMPLES::

            sage: V = VirasoroVertexAlgebra(QQ,1/2);V.find_singular(6)
            [L_-2L_-2L_-2|0>-33/8*L_-4L_-2|0>+93/64*L_-3L_-3|0>-27/16*L_-6|0>]
            sage: v = _[0]; I = V.ideal(v)
            sage: I.get_degree(6)
            Free module generated by {0} over Rational Field
            sage: I.get_degree(8)
            Free module generated by {0, 1, 2, 3} over Rational Field
            sage: F = _.basis()
            sage: F[0].lift()
            B[([1, 1, 1])] + 93/64*B[([2, 2])] - 33/8*B[([3, 1])] - 27/16*B[([5])]
            sage: V._from_dict(F[0].lift().monomial_coefficients())
            L_-2L_-2L_-2|0>-33/8*L_-4L_-2|0>+93/64*L_-3L_-3|0>-27/16*L_-6|0>
        """
        A = self._ambient.get_degree(n)
        ngens = self._ambient.ngens()
        if ngens == 1:
            basis = [g._action_from_partition_tuple(PartitionTuples_level(1)(
                [p,])) for m in range(n+1) for g in self._gens if 
                g.degree() <= m for p in Partitions(m-g.degree()) ]
        else:
            basis = [ g._action_from_partition_tuple(p) for m in range(n+1)
            for g in self._gens if g.degree() <= m for p in 
            PartitionTuples(level=ngens, size = m-g.degree()) ] 

        basis = [ A._from_dict(b.value.monomial_coefficients()) for b in basis ]
        return A.submodule(basis)

    def get_graded_part(self,n):
        r"""
        Returns the associated graded in degree `n` with respect to the Li
        filtration of this ideal. 

        EXAMPLES::

            sage: V = VirasoroVertexAlgebra(QQ,1/2);V.find_singular(6)
            [L_-2L_-2L_-2|0>-33/8*L_-4L_-2|0>+93/64*L_-3L_-3|0>-27/16*L_-6|0>]
            sage: v = _[0]; I = V.ideal(v)
            sage: I.get_graded_part(6)
            Free module generated by {0} over Rational Field
            sage: I.get_graded_part(8)
            Free module generated by {0, 1} over Rational Field
            sage: F = _.basis()
            sage: F[0].lift()
            B[([1, 1, 1, 1])] + 357/64*B[([2, 2, 1])] + 297/128*B[([3, 3])] + 513/256*B[([4, 2])] - 1143/32*B[([5, 1])] - 2601/256*B[([7])]
            sage: V._from_dict(F[0].lift().monomial_coefficients())
            L_-2L_-2L_-2L_-2|0>+357/64*L_-3L_-3L_-2|0>-1143/32*L_-6L_-2|0>+513/256*L_-5L_-3|0>+297/128*L_-4L_-4|0>-2601/256*L_-8|0>
        
        TODO::

            - change the name of this method to get_li_graded_part
        """
        A = self._ambient.get_graded_part(n)
        ngens = self._ambient.ngens()
        if ngens == 1:
            basis = [g._action_from_partition_tuple(PartitionTuples_level(1)(
                [p,])) for g in self._gens if 
                g.degree() <= n for p in Partitions(n-g.degree()) ]
        else:
            basis = [ g._action_from_partition_tuple(p) for
            g in self._gens if g.degree() <= n for p in 
            PartitionTuples(level=ngens, size = n-g.degree()) ] 

        basis = [ A._from_dict(b.value.monomial_coefficients()) for b in basis ]
        return A.submodule(basis)

    def ambient(self):
        r"""Return the ambient vertex algebra of this ideal

        EXAMPLES::

            sage: V = VirasoroVertexAlgebra(QQ,1/2); v = V.find_singular(6)[0]; I = V.ideal(v); I
            ideal of The Virasoro vertex algebra at central charge 1/2 generated by (L_-2L_-2L_-2|0>-33/8*L_-4L_-2|0>+93/64*L_-3L_-3|0>-27/16*L_-6|0>,)
            sage: I.ambient()
            The Virasoro vertex algebra at central charge 1/2

        """
        return self._ambient

    def reduce(self,x):
        r"""return the reduction of the element `x` modulo this ideal

        INPUT:
        
            - ``x`` an element of the ambient vertex algebra

        EXAMPLES::

            sage: V = VirasoroVertexAlgebra(QQ,1/2); v = V.find_singular(6)[0]; I = V.ideal(v); I
            ideal of The Virasoro vertex algebra at central charge 1/2 generated by (L_-2L_-2L_-2|0>-33/8*L_-4L_-2|0>+93/64*L_-3L_-3|0>-27/16*L_-6|0>,)
            sage: L = V.gen(0); I.reduce(L*(L*L))
            -93/64*B[([2, 2])] + 33/8*B[([3, 1])] + 27/16*B[([5])]
            sage: V._from_dict(_.monomial_coefficients())
            33/8*L_-4L_-2|0>-93/64*L_-3L_-3|0>+27/16*L_-6|0>

        TODO:
            
            return an element of V

        """
        S = self.get_degree(x.weight())
        A = S.ambient()
        return S.reduce(A._from_dict(x.value.monomial_coefficients()))

    def gens(self):
        r"""The generators of this ideal"""
        return self._gens

