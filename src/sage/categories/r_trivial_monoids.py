#*****************************************************************************
#  Copyright (C) 2009-2010 Florent Hivert <florent.hivert at univ-rouen.fr>
#                2009-2010 Nicolas M. Thiery <nthiery at users.sf.net>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#                  http://www.gnu.org/licenses/
#******************************************************************************

from sage.misc.cachefunc import cached_method
from sage.categories.category import Category
from sage.categories.category_with_axiom import CategoryWithAxiom
from sage.categories.h_trivial_monoids import HTrivialMonoids


class RTrivialMonoids(Category):
    """
    The category of `R`-trivial monoids

    Let `M` be a monoid. The `R`-*preorder* is defined by `x\leq_R y`
    if `x \in yM`.  The `R`-*classes* are the equivalence classes
    for the associated equivalence relation.  A monoid is `R`-*trivial*
    if all its `R`-classes are trivial, that is of cardinality `1`, or
    equivalently if the `R`-preorder is in fact an order.

    EXAMPLES::

        sage: C = RTrivialMonoids(); C
        Category of r trivial monoids
        sage: C.super_categories()
        [Category of h trivial monoids]

    .. seealso:: :class:`LTrivialMonoids`, :class:`HTrivialMonoids`, :class:`JTrivialMonoids`
    """

    @cached_method
    def super_categories(self):
        """
        EXAMPLES:

        An R-trivial monoid is also H-trivial::

            sage: RTrivialMonoids().super_categories()
            [Category of h trivial monoids]
        """
        return [HTrivialMonoids()]

    def example(self, alphabet=('a', 'b', 'c')):
        """
        Return an example of (finite) right trivial monoid.

        .. seealso:: :meth:`Category.example`

        .. TODO:: this cheating a bit: this is just a semigroup, not a monoid!

        EXAMPLES::

            sage: S = RTrivialMonoids().example(); S
            An example of a finite semigroup: the left regular band generated by ('a', 'b', 'c')
            sage: S.category()
            Category of finite r trivial monoids
        """
        from sage.categories.examples.finite_semigroups import LeftRegularBand
        return LeftRegularBand(alphabet=alphabet,
                               category=RTrivialMonoids().Finite())

    class Finite(CategoryWithAxiom):

        class ParentMethods:

            def index_of_regular_j_class(self, idempotent):
                """
                Return the index that should be used for an idempotent in the transversal.

                In this implementation, each idempotent e is indexed
                by the subset of the indices `i` of the generators
                `s_i` such that `es_i=e` (that is `s_i` acts by `1` on
                the corresponding simple module).

                .. seealso:: :meth:`FiniteSemigroups.ParentMethods.j_transversal_of_idempotents`

                EXAMPLES::

                    sage: S = RTrivialMonoids().example(alphabet=('a','b','c')); S
                    An example of a finite semigroup: the left regular band generated by ('a', 'b', 'c')
                    sage: S.category()
                    Category of finite r trivial monoids
                    sage: a,b,c = S.semigroup_generators()
                    sage: S.index_of_regular_j_class(a*c)
                    (0, 2)

                This is used to index the transversal of idempotents::

                    sage: sorted(S.j_transversal_of_idempotents().keys())
                    [(0,), (0, 1), (0, 1, 2), (0, 2), (1,), (1, 2), (2,)]

                """
                s = self.semigroup_generators()
                return tuple(i for i in s.keys()
                             if idempotent * s[i] == idempotent)
