r"""
Finitely generated semigroups
"""
#*****************************************************************************
#  Copyright (C) 2014 Nicolas M. Thiery <nthiery at users.sf.net>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#                  http://www.gnu.org/licenses/
#******************************************************************************

import itertools
from sage.misc.abstract_method import abstract_method
from sage.misc.cachefunc import cached_method
from sage.categories.category_with_axiom import CategoryWithAxiom
from sage.categories.semigroups import Semigroups
from sage.categories.enumerated_sets import EnumeratedSets

class FinitelyGeneratedSemigroups(CategoryWithAxiom):
    r"""
    The category of finitely generated (multiplicative) semigroups.

    A :class:`finitely generated semigroup <Semigroups>` is a
    :class:`semigroup <Semigroups>` endowed with a distinguished
    finite set of generators (see
    :meth:`FinitelyGeneratedSemigroups.ParentMethods.semigroup_generators`). This
    makes it into an :class:`enumerated set <EnumeratedSets>`.

    EXAMPLES::

        sage: C = Semigroups().FinitelyGenerated(); C
        Category of finitely generated semigroups
        sage: C.super_categories()
        [Category of semigroups,
         Category of finitely generated magmas,
         Category of enumerated sets]
        sage: sorted(C.axioms())
        ['Associative', 'FinitelyGeneratedAsMagma']
        sage: C.example()
        An example of a semigroup: the free semigroup generated by ('a', 'b', 'c', 'd')

    TESTS::

        sage: TestSuite(C).run()
    """

    _base_category_class_and_axiom = (Semigroups, "FinitelyGeneratedAsMagma")

    @cached_method
    def extra_super_categories(self):
        r"""
        State that a finitely generated semigroup is endowed with a
        default enumeration.

        EXAMPLES::

            sage: Semigroups().FinitelyGenerated().extra_super_categories()
            [Category of enumerated sets]

        """
        return [EnumeratedSets()]

    def example(self):
        r"""
        EXAMPLES::

            sage: Semigroups().FinitelyGenerated().example()
            An example of a semigroup: the free semigroup generated by ('a', 'b', 'c', 'd')
        """
        return Semigroups().example("free")

    class ParentMethods:

        @abstract_method
        def semigroup_generators(self):
            r"""
            Return distinguished semigroup generators for ``self``.

            OUTPUT: a finite family

            This method should be implemented by all semigroups in
            :class:`FinitelyGeneratedSemigroups`.

            EXAMPLES::

                sage: S = FiniteSemigroups().example()
                sage: S.semigroup_generators()
                Family ('a', 'b', 'c', 'd')
            """

    class Finite(CategoryWithAxiom):

        class ParentMethods:
            def some_elements(self):
                r"""
                Return an iterable containing some elements of the semigroup.

                OUTPUT: the ten first elements of the semigroup, if they exist.

                EXAMPLES::

                    sage: S = FiniteSemigroups().example(alphabet=('x','y'))
                    sage: S.some_elements()
                    ['y', 'x', 'xy', 'yx']
                    sage: S = FiniteSemigroups().example(alphabet=('x','y','z'))
                    sage: S.some_elements()
                    ['y', 'x', 'xy', 'xyz', 'xz', 'yx', 'yxz', 'xzy', 'yz', 'z']
                """
                return list(itertools.islice(self, 10))
